# This is a basic workflow to help you get started with Actions

name: flugel.it

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt1
        run: terraform fmt -check
        working-directory: ./flugel.it/terraform
        
      - name: Terraform Init
        id: init1
        run: terraform init
        working-directory: ./flugel.it/terraform

      - name: Terraform Validate
        id: validate1
        run: terraform validate -no-color
        working-directory: ./flugel.it/terraform
        
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: install dependencies
        run: go get github.com/gruntwork-io/terratest/modules/aws
     
      - name: install dependencies1
        run: go get github.com/stretchr/testify/assert
        
      - name: install dependencies
        run: go get github.com/gruntwork-io/terratest/modules/terraform

      - name: Test
        run: go test -v ./...
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: ./flugel.it/terraform
        
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        
      - name: Terraform Apply
        id: terraid
        run: terraform apply -auto-approve
        working-directory: ./flugel.it/terraform
        
      - name: sdfsdf
        id: setting_output
        run: echo "::set-output name=app_url::$(terraform-bin output -raw application_url)"
        working-directory: ./flugel.it/terraform
        
      - name: Sleep for 90 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '90s'
        
      - name: checking py serviceh
        run: curl "${{ steps.setting_output.outputs.app_url }}/tags"
        continue-on-error: true
        
      - name: checking py serviceh
        run: curl "${{ steps.setting_output.outputs.app_url }}/tags"
        continue-on-error: true
        
      - name: Clean up
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ./flugel.it/terraform
