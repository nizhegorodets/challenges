# This is a basic workflow to help you get started with Actions

name: flugel.it

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt1
        run: terraform fmt -check
        working-directory: ./flugel.it/terraform
        
      - name: Terraform Init
        id: init1
        run: terraform init
        working-directory: ./flugel.it/terraform

      - name: Terraform Validate
        id: validate1
        run: terraform validate -no-color
        working-directory: ./flugel.it/terraform
        
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: ./flugel.it/terraform
        
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        
      - name: Terraform Apply
        id: terraid
        run: terraform apply -auto-approve
        working-directory: ./flugel.it/terraform
      
      - name: afadf
        id: terra_output
        run: export output=$(terraform output instance_public_uri)
        working-directory: ./flugel.it/terraform
        
      - name: afadf
        id: terra_output1
        run: echo $output
        working-directory: ./flugel.it/terraform
        
      - name: sdfsdf
        id: setting_output
        run: echo "::set-output name=ec2_uri::$(terraform output -raw instance_public_uri)"
        working-directory: ./flugel.it/terraform
        
      - name: fssdf
        run: echo "The selected color is ${{ steps.setting_output.outputs.ec2_uri }}"         
        env:
          EC2_URI: "The selected color is ${{ steps.setting_output.outputs.ec2_uri }}"
        
      - name: afadf
        run:  echo $EC2_URI
        
        
      - name: curl
        uses: wei/curl@master
        with:
          args: "${{ steps.setting_output.outputs.ec2_uri }}:8000/tags"
        
      - name: checking py service
        run: curl "${{ steps.setting_output.outputs.ec2_uri }}:8000/tags"
        
        
      - name: Clean up
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ./flugel.it/terraform
